
/// @brief Doxygen dummy class specifying the API available at different
///        layers
class layer
{
public:

    /// @typedef field_type
    /// The finite field type used e.g. fifi::binary8 for the Finite
    /// Field 2^8
    typedef fifi_finite_field field_type;

    /// @typedef value_type
    /// The value type storing the field elements used for the
    /// specified field. E.g. the binary extension field 2^8 uses
    /// uint8_t as the value_type.
    typedef field::value_type value_type;

    /// @typedef seed_type
    /// The data type used for seeding the generators in the Generator API.
    /// Generators implementing the layer::seed(seed_type) function should
    /// also provide this typedef.
    typedef seed_type seed_type;

    /// @typedef rank_type
    /// Specifies the data type used to store the rank
    typedef rank_type rank_type;

    class factory
    {
    public:

        //------------------------------------------------------------------
        // FACTORY API
        //------------------------------------------------------------------

        /// @ingroup factory_api
        /// @brief Factory constructor
        /// @param max_symbols the maximum symbols this coder can expect
        /// @param max_symbol_size the maximum size of a symbol in bytes
        factory(uint32_t max_symbols, uint32_t max_symbol_size);

        /// @ingroup factory_api
        /// @brief Builds the actual coder
        /// @return pointer to an instantiation of an encoder or decoder
        pointer build()

        //------------------------------------------------------------------
        // Functions belonging to other APIs but placed required in the
        // factory in order to correctly build the different layers.
        //------------------------------------------------------------------

        /// @ingroup factory_api
        /// @return the maximum number of symbols in a block
        uint32_t max_symbols() const;

        /// @ingroup factory_api
        /// @return the maximum symbol size in bytes
        uint32_t max_symbol_size() const;

        /// @ingroup storage_api
        /// @return The maximum amount of data encoded / decoded in bytes.
        ///         This is calculated by multiplying the maximum number
        ///         of symbols encoded / decoded by the maximum size of
        ///         a symbol.
        uint32_t max_block_size() const;

        /// @ingroup codec_header_api
        /// @brief Can be reimplemented by a symbol header API layer to
        ///        ensure that enough space is available in the header for
        ///        some layer specific data.
        ///
        /// @note If you implement this function you most likely also have
        ///       to implement the layer::header_size() function.
        ///
        /// @return The size in bytes required for the symbol header buffer.
        uint32_t max_header_size() const;

        /// @ingroup symbol_id_api
        /// @brief Can be reimplemented by a Factory Symbol ID layer
        ///
        /// @note If you implement this function you most likely also have
        ///       to implement the layer::header_size() function.
        ///
        /// @return The maximum size in bytes required for a symbol id.
        /// @see factory_layer_api
        uint32_t max_id_size() const;

        /// @ingroup payload_codec_api
        ///
        /// @note If you implement this function you most likely also have
        ///       to implement the layer::payload_size() function.
        ///
        /// @return the maximum required payload buffer size in bytes
        uint32_t max_payload_size() const;

        /// @ingroup coefficient_storage_api
        ///
        /// @note If you implement this function you most likely also have
        ///       to implement the layer::coefficients_size() function.
        ///
        /// @return The maximum required coefficients buffer size in bytes
        uint32_t max_coefficients_size() const;

    };

    //------------------------------------------------------------------
    // CONSTRUCTION API
    //------------------------------------------------------------------

    /// @ingroup factory_api
    /// @brief Constructs the coder with the maximum parameters it will ever
    ///        see. A coder may only be constructed ONCE, but initialized
    ///        many times.
    /// @param the_factory The factory used to build the codec layer. Provides
    ///        access to cached data and factory functions.
    template<class Factory>
    void construct(Factory &the_factory);

    /// @ingroup factory_api
    /// @brief Initializes the coder
    /// @param the_factory The factory used to build the codec layer. Provides
    ///        access to cached data and factory functions.
    template<class Factory>
    void initialize(Factory &the_factory);

    //------------------------------------------------------------------
    // CODEC HEADER API
    //------------------------------------------------------------------

    /// @ingroup codec_header_api
    /// @brief Writes the symbol header.
    /// @param symbol_data The destination buffer for the encoded symbol.
    /// @param symbol_header At this point the symbol header should be
    ///        initialized.
    /// @return The number of bytes used from symbol_header buffer.
    uint32_t encode(uint8_t *symbol_data, uint8_t *symbol_header);

    /// @ingroup codec_header_api
    /// @brief Reads the symbol header.
    /// @param symbol_data The destination buffer for the encoded symbol.
    /// @param symbol_header At this point the symbol header should be
    ///        initialized.
    void decode(uint8_t *symbol_data, uint8_t *symbol_header);

    /// @ingroup codec_header_api
    /// @brief Can be reimplemented by a symbol header API layer to
    ///        ensure that enough space is available in the header for
    ///        some layer specific data.
    ///
    /// @note If you implement this function you most likely also have
    ///       to implement the layer::factory::max_header_size() function.
    ///
    /// @return The size in bytes required for the symbol header buffer.
    uint32_t header_size() const;

    //------------------------------------------------------------------
    // SYMBOL ID API
    //------------------------------------------------------------------

    /// @ingroup symbol_id_api
    /// @brief Can be reimplemented by a Symbol ID layer
    /// @param symbol_id The buffer where the symbol id is written. This id
    ///        should uniquely describe the coding coefficients
    ///        used to generate an encoded symbol. It is therefore
    ///        sufficient to transmit only the symbol id and not
    ///        necessarily all coding coefficients to decoders.
    /// @param coefficient Pointer to a pointer of coefficients.
    ///        After the call to write_id the coefficients pointer
    ///        will point to memory storing all coding coefficients
    ///        corresponding to the symbol id written to the symbol_id
    ///        buffer.
    ///        Note, the buffer returned may be change by the calling
    ///        code. The implementation should therefore ensure that this
    ///        will not cause problems e.g. by returning a pointer to a
    ///        internal buffered copy of the coefficients.
    ///
    /// @return The number of bytes used from the symbol_id buffer.
    uint32_t write_id(uint8_t *symbol_id, uint8_t **coefficients);

    /// @ingroup symbol_id_api
    /// @brief Can be reimplemented by a Symbol ID layer
    /// @param symbol_id Contains the symbol id for an encoded symbol.
    /// @param coefficient Pointer to pointer of the symbol
    ///        coefficients. After the call to read_id the
    ///        coefficients pointer will point to memory storing
    ///        all coding coefficients corresponding to the symbol id
    ///        read from the symbol_id buffer.
    ///        Note, the buffer returned may be change by the calling
    ///        code. The implementation should therefore ensure that this
    ///        will not cause problems e.g. by returning a pointer to a
    ///        internal buffered copy of the coefficients.
    void read_id(uint8_t *symbol_id, uint8_t **coefficients);

    /// @ingroup symbol_id_api
    /// @brief Can be reimplemented by a Symbol ID layer
    ///
    /// @note If you implement this function you most likely also have
    ///       to implement the layer::factory::max_id_size() function.
    ///
    /// @return the size in bytes required for the symbol id buffer.
    uint32_t id_size();

    //------------------------------------------------------------------
    // COEFFICIENT GENERATOR API
    //------------------------------------------------------------------

    /// @ingroup coefficient_generator_api
    /// Fills the input buffer with symbol coefficients used for either
    /// encoding or decoding a symbol.
    /// @param symbol_coefficient Pointer to the memory where the symbol
    ///        coefficients should be stored. The symbol_coefficient
    ///        buffer should have at least layer::coefficients_size()
    ///        capacity.
    void generate(uint8_t *symbol_coefficients);

    /// @ingroup coefficient_generator_api
    /// The generate partial function must only generate non-zero symbol
    /// coefficients for symbols which have been set in the Symbol
    /// Storage Layer. The primary use-case for generate_partial(uint8_t*)
    /// is to allow encoding to start prior to having all original source
    /// symbols available.
    /// @copydoc generate(uint8_t*)
    void generate_partial(uint8_t *symbol_coefficients);

    /// @ingroup coefficient_generator_api
    /// Set the seed of the coefficient generator used. Note that not all
    /// generators provide the seed() function. E.g. a layer using a
    /// Vandermonde matrix as source for the symbol coefficients will not
    /// implement the seed() function.
    ///
    /// @note If you implement this function you most likely also have
    ///       to provide the layer::seed_type typedef.
    ///
    /// @param seed The seed value for the generator.
    void seed(seed_type seed_value);

    //------------------------------------------------------------------
    // CODEC API
    //------------------------------------------------------------------

    /// @ingroup codec_api
    /// Encodes a symbol according to the symbol coefficients
    ///
    /// @param symbol_data The destination buffer for the encoded symbol
    /// @param coefficients At this point the symbol id should be
    ///        initialized with the desired coding coefficients.
    void encode_symbol(uint8_t *symbol_data, uint8_t *coefficients);

    /// @ingroup codec_api
    /// The encode function for systematic packets i.e. specific uncoded
    /// symbols.
    /// @param symbol_data The destination of the uncoded source symbol.
    /// @param symbol_index The index of this uncoded symbol in the data
    ///                     block.
    void encode_symbol(uint8_t *symbol_data, uint32_t symbol_index);

    /// @ingroup codec_api
    /// Decodes an encoded symbol according to the coding coefficients
    /// stored in the corresponding symbol_id.
    ///
    /// @param symbol_data The encoded symbol
    /// @param coefficients The coding coefficients used to
    ///        create the encoded symbol
    void decode_symbol(uint8_t *symbol_data, uint8_t *coefficients);

    /// @ingroup codec_api
    /// The decode function for systematic packets i.e. specific uncoded
    /// symbols.
    /// @param symbol_data The uncoded source symbol.
    /// @param symbol_index The index of this uncoded symbol in the data
    ///                     block.
    void decode_symbol(uint8_t *symbol_data, uint32_t symbol_index);

    /// @ingroup codec_api
    /// Check whether decoding is complete.
    /// @return true if the decoding is complete
    bool is_complete() const;

    /// @ingroup codec_api
    /// The rank of a decoder states how many symbols have been decoded
    /// or partially decoded. The rank of an encoder states how many symbols
    /// are available for encoding.
    /// @return the rank of the decoder or encoder
    uint32_t rank() const;

    /// @ingroup codec_api
    /// The symbol pivot indicates whether a symbol is available to either an
    /// encoder or decoder. A coefficient generator may use this information
    /// when generating coding coefficients.
    /// @return True if the symbol is available.
    bool symbol_pivot(uint32_t index) const;

    /// @ingroup codec_api
    /// Inspect the state of a stored symbol, namely whether it is coded or
    /// uncoded (i.e. representing an original source symbol). It is important
    /// to note that for efficiency reasons the decoding algorithms are not
    /// required to keep track of which previously coded symbols have
    /// during the decoding become uncoded. This means we have two cases:
    /// 1) Coded symbols - these symbols may or may not have been fully decoded
    /// 2) Uncoded symbols - these are guaranteed to have been fully decoded.
    ///
    /// @param index The index of the symbol which state we wish to know
    /// @return This function returns true if the symbol with the specified
    ///         index is coded. If the symbol is known to be uncoded the
    ///         the function will return false.
    bool symbol_coded(uint32_t index) const;

    //------------------------------------------------------------------
    // COEFFICIENT STORAGE API
    //------------------------------------------------------------------

    /// @ingroup coefficient_storage_api
    ///
    /// @note If you implement this function you most likely also have
    ///       to implement the layer::factory::max_coefficients_size()
    ///       function.
    ///
    /// @return The number of bytes needed to store the symbol coefficients.
    uint32_t coefficients_size() const;

    /// @ingroup coefficient_storage_api
    /// @return The number of layer::value_type elements needed to store
    ///         the symbol coefficients.
    uint32_t coefficients_length() const;

    /// @ingroup coefficient_storage_api
    /// @return The number of coefficients stored in a coefficient vector. The
    ///         count will say how many finite field elements will be stored
    ///         within a coefficient vector, whereas the size and length refers
    ///         to the space (in terms of memory) occupied by those coefficients.
    uint32_t coefficients_count() const;

    /// @ingroup coefficient_storage_api
    /// @param index the index in the vector
    /// @return the specified vector
    value_type* coefficients_value(uint32_t index);

    /// @ingroup coefficient_storage_api
    /// @param index the index in the vector
    /// @return the specified vector
    const value_type* coefficients_value(uint32_t index) const;

    /// @ingroup coefficient_storage_api
    /// @param index the index in the vector
    /// @return the specified vector
    uint8_t* coefficients(uint32_t index);

    /// @ingroup coefficient_storage_api
    /// @param index the index in the vector
    /// @return the specified vector
    const uint8_t* coefficients(uint32_t index) const;

    /// @ingroup coefficient_storage_api
    /// Sets a coefficient buffer - by copying it into the right location in
    /// the buffer.
    /// @param index the index of the coefficients into the coding block
    /// @param storage The actual data of the coefficients
    void set_coefficients(uint32_t index, const sak::const_storage &storage);

    //------------------------------------------------------------------
    // FINITE FIELD API
    //------------------------------------------------------------------

    /// @ingroup finite_field_api
    /// Multiplies the symbol with the coefficient
    ///     symbol_dest = symbol_dest * coefficient
    ///
    /// @param symbol_dest the destination buffer for the source symbol
    /// @param coefficient the multiplicative constant
    /// @param symbol_length the length of the symbol in layer::value_type
    ///        elements
    void multiply(value_type *symbol_dest,
                  value_type coefficient,
                  uint32_t symbol_length);

    /// @ingroup finite_field_api
    /// Multiplies the source symbol with the coefficient and adds it to the
    /// destination symbol i.e.:
    ///     symbol_dest = symbol_dest + symbol_src * coefficient
    ///
    /// @param symbol_dest the destination buffer for the source symbol
    /// @param symbol_src the source buffer for the
    /// @param coefficient the multiplicative constant
    /// @param symbol_length the length of the symbol in value_type elements
    void multiply_add(value_type *symbol_dest,
                      const value_type *symbol_src,
                      value_type coefficient,
                      uint32_t symbol_length);

    /// @ingroup finite_field_api
    /// Adds the source symbol adds to the destination symbol i.e.:
    ///     symbol_dest = symbol_dest + symbol_src
    ///
    /// @param symbol_dest the destination buffer holding the resulting
    ///        symbol
    /// @param symbol_src the source symbol
    /// @param symbol_length the length of the symbol in value_type elements
    void add(value_type *symbol_dest,
             const value_type *symbol_src,
             uint32_t symbol_length);

    /// @ingroup finite_field_api
    /// Multiplies the source symbol with the coefficient and subtracts
    /// it from the destination symbol i.e.:
    ///     symbol_dest = symbol_dest - (symbol_src * coefficient)
    ///
    /// @param symbol_dest the destination buffer for the source symbol
    /// @param symbol_src the source buffer for the
    /// @param coefficient the multiplicative constant
    /// @param symbol_length the length of the symbol in value_type elements
    void multiply_subtract(value_type *symbol_dest,
                           const value_type *symbol_src,
                           value_type coefficient,
                           uint32_t symbol_length);

    /// @ingroup finite_field_api
    /// Subtracts the source symbol from the destination symbol i.e.:
    ///     symbol_dest = symbol_dest - symbol_src
    ///
    /// @param symbol_dest the destination buffer holding the resulting
    ///        symbol
    /// @param symbol_src the source symbol
    /// @param symbol_length the length of the symbol in value_type elements
    void subtract(value_type *symbol_dest,
                  const value_type *symbol_src,
                  uint32_t symbol_length);

    /// @ingroup finite_field_api
    /// Inverts the field element
    /// @param value the finite field value to be inverted.
    /// @return the inverse
    value_type invert(value_type value);

    //------------------------------------------------------------------
    // SYMBOL STORAGE API
    //------------------------------------------------------------------

    /// @ingroup storage_api
    /// Copies the encoded / decoded symbols to the dest buffer.
    /// @param dest The destination buffer where the symbols should be
    ///        copied. The function will copy block_size() bytes or until
    ///        the dest buffer is full.
    void copy_symbols(const sak::mutable_storage &dest) const;

    /// @ingroup storage_api
    /// Copies an encoded / decoded symbols to the dest buffer.
    /// @param index The index of the symbol to be copied
    /// @param dest The destination buffer where the symbols should be
    ///        copied. The function will copy symbol_size() bytes or until
    ///        the dest buffer is full.
    void copy_symbol(uint32_t index,
                     const sak::mutable_storage &dest) const;

    /// @ingroup storage_api
    /// @param index the index number of the symbol
    /// @return Returns a pointer to the symbol data. The size of
    ///         the symbol data is provided by the symbol_size() function.
    uint8_t* symbol(uint32_t index);

    /// @ingroup storage_api
    /// @param index the index number of the symbol
    /// @return Returns a const pointer to the symbol data. The size of
    ///         the symbol data is provided by the symbol_size() function.
    const uint8_t* symbol(uint32_t index) const;

    /// @ingroup storage_api
    /// @param index the index number of the symbol
    /// @return Returns a layer::value_type pointer to the symbol data.
    ///         The length of the symbol data is provided by the
    ///         symbol_length() function.
    value_type* symbol_value(uint32_t index);

    /// @ingroup storage_api
    /// @param index the index number of the symbol
    /// @return Returns a const layer::value_type pointer to the symbol
    ///         data. The length of the symbol data is provided by the
    ///         symbol_length() function.
    const value_type* symbol_value(uint32_t index) const;

    /// @ingroup storage_api
    /// Sets the storage for the source symbols. This will specify all
    /// symbols also in the case of partial data. If this is not desired
    /// then the symbols should be specified individually. This also
    /// means that it is the responsibility of the user to communicate
    /// how many of the bytes transmitted are application data.
    /// @param symbol_storage A sak::const_storage container initialized
    ///        with the buffer to be use as encoding buffer.
    void set_symbols(const sak::const_storage &symbol_storage);

    /// @ingroup storage_api
    /// Sets the storage for the source symbols. This will specify all
    /// symbols also in the case of partial data. If this is not desired
    /// then the symbols should be specified individually. This also
    /// means that it is the responsibility of the user to communicate
    /// how many of the bytes transmitted are application data.
    /// @param symbol_storage A sak::mutable_storage container initialized
    ///        with the buffer to be use as encoding / decoding buffer.
    void set_symbols(const sak::mutable_storage &symbol_storage);

    /// @ingroup storage_api
    /// Sets a data of a symbol.
    /// @param index the index of the symbol into the coding block
    /// @param symbol the actual data of that symbol
    void set_symbol(uint32_t index, const sak::mutable_storage &symbol);

    /// @ingroup storage_api
    /// Sets a symbol.
    /// @param index the index of the symbol into the coding block
    /// @param symbol the actual data of that symbol
    void set_symbol(uint32_t index, const sak::const_storage &symbol);

    /// @ingroup storage_api
    /// @param symbols. A std::vector initialized with pointers to every
    ///        symbol
    void swap_symbols(std::vector<const uint8_t*> &symbols);

    /// @ingroup storage_api
    /// @param symbols. A std::vector initialized with pointers to every
    ///        symbol
    void swap_symbols(std::vector<uint8_t*> &symbols);

    /// @ingroup storage_api
    /// @param index the index number of the symbol
    void swap_symbols(std::vector<uint8_t> &symbols);

    /// @ingroup storage_api
    /// @return the number of symbols in this block coder
    uint32_t symbols() const;

    /// @ingroup storage_api
    /// @return the symbol size of a symbol in bytes
    uint32_t symbol_size() const;

    /// @ingroup storage_api
    /// @return the length of the symbol in layer::value_type elements
    uint32_t symbol_length() const;

    /// @ingroup storage_api
    /// @return the block size i.e. the total size in bytes
    ///         that this coder operates on. Users may
    ///         use the bytes_used() function provided in the
    ///         symbol storage layers to see how many of those
    ///         bytes are then used.
    uint32_t block_size() const;

    /// @ingroup storage_api
    /// Sets the number of bytes used
    /// @param bytes_used number of bytes used of the total coders
    ///        block size
    void set_bytes_used(uint32_t bytes_used);

    /// @ingroup storage_api
    /// @return the number of bytes used
    uint32_t bytes_used() const;

    /// @ingroup storage_api
    /// @return The number of symbols that are available. Available
    ///         means where the memory is available, but which may not
    ///         have been initialized through a layer::set_symbol() or
    ///         layer::set_symbols() by the user.
    uint32_t symbols_available() const;

    /// @ingroup storage_api
    /// @return The number of symbols that are initialized.
    ///         Initialized means that a symbols memory is available and
    ///         has been explicitly set by the user through a
    ///         layer::set_symbol() or layer::set_symbols() call.
    ///         Any symbol which is initialized is also available.
    uint32_t symbols_initialized() const;

    /// @ingroup storage_api
    /// @return True if all symbols in the storage layer are available.
    ///         Available means where the memory is available, but which
    ///         may not have been initialized through a layer::set_symbol()
    ///         or layer::set_symbols() by the user.
    ///         Available means where the memory is available, but not
    ///         by the user.
    bool is_symbols_available() const;

    /// @ingroup storage_api
    /// @return True if all symbols in the storage layer is initialized.
    ///         Initialized means that a symbols memory is available and
    ///         has been explicitly set by the user through a
    ///         layer::set_symbol() or layer::set_symbols() call.
    ///         Any symbol which is initialized is also available.
    bool is_symbols_initialized() const;

    /// @ingroup storage_api
    /// @param symbol_index The index of the symbol to check
    /// @return True if the specific symbol is available.
    ///         Available means where the memory is available, but which
    ///         may not have been initialized through a layer::set_symbol()
    ///         or layer::set_symbols() by the user.
    ///         Available means where the memory is available, but not
    ///         by the user.
    bool is_symbol_available(uint32_t symbol_index) const;

    /// @ingroup storage_api
    /// @param symbol_index The index of the symbol to check
    /// @return True if the specific symbol is initialized.
    ///         Initialized means that a symbols memory is available and
    ///         has been explicitly set by the user through a
    ///         layer::set_symbol() or layer::set_symbols() call.
    ///         Any symbol which is initialized is also available.
    bool is_symbol_initialized(uint32_t symbol_index) const;

    //------------------------------------------------------------------
    // PAYLOAD API
    //------------------------------------------------------------------

    /// @ingroup payload_codec_api
    /// Encodes a symbol into the provided buffer.
    /// @param payload The buffer which should contain the encoded
    ///        symbol.
    /// @return the total bytes used from the payload buffer
    uint32_t encode(uint8_t *payload);

    /// @ingroup payload_codec_api
    /// Decodes an encoded symbol stored in the payload buffer.
    /// @param payload The buffer storing the payload of an encoded symbol.
    ///        The payload buffer may be changed by the decode function,
    ///        an cannot be reused. If the payload is needed in several places
    ///        make sure to keep a copy of the original payload.
    void decode(uint8_t *payload);

    /// @ingroup payload_codec_api
    /// Recodes a symbol into the provided buffer. This function is special for
    /// network codes.
    /// @param payload The buffer which should contain the recoded
    ///        symbol.
    /// @return the total bytes used from the payload buffer
    uint32_t recode(uint8_t *payload);

    /// @ingroup payload_codec_api
    ///
    /// @note If you implement this function you most likely also have
    ///       to implement the layer::factory::max_header_size() function.
    ///
    /// @return the required payload buffer size in bytes
    uint32_t payload_size() const;

};





